# \file
#
# \brief Mando make base module
#
# This file contains the implementation of the Mando make 
# base module.
#
# \author Mando, Advanced R&D, Korea

#################################################################

MAK_FILE_SUFFIX     :=mak
DEFS_FILE_SUFFIX    :=_defs.$(MAK_FILE_SUFFIX)
RULES_FILE_SUFFIX   :=_rules.$(MAK_FILE_SUFFIX)
CHECK_FILE_SUFFIX   :=_check.$(MAK_FILE_SUFFIX)
CFG_FILE_SUFFIX     :=_cfg.$(MAK_FILE_SUFFIX)
VARIANT_FILE_SUFFIX :=_var.$(MAK_FILE_SUFFIX)

#################################################################
# MANDO VARIANT MANAGEMENT SECTION
# MANDO_SYSTEM      := BUILDPACKAGE_NAME
# MANDO_MCU         := TC23X_AB
# MANDO_PLATFORM    :=  AUTOSAR || LEGACY
# OEM_CAR_NAME      :=  generated by Car_par.h
# OEM_MCAL_CAR_NAME :=  HMC_MOCI
# OEM_LOGIC_CAL_NAME :=  generated by Car_par.h
#-include $(MANDO_DIR)\mando_carpar_gen_cfg.mak

MANDO_SYSTEM        := $(BUILDPACKAGE_NAME)
MANDO_MCU           := TC23X_AB
MANDO_PLATFORM      := AUTOSAR
OEM_CAR_NAME	    := $(M_CAR)
ifeq ($(M_CAR_MAKER), GM_CHINA)
MANDO_USE_CANNM := TRUE
MANDO_PERF_MAX := TRUE
endif
ifeq ($(M_CAR_MAKER), GEELY)
MANDO_USE_CANNM := TRUE
endif

OEM_MCAL_CAR_NAME   := ESC_BASE

#CREATE_PREPROCESSOR_FILE := YES

# added 'make depend' rule to support STManager
MANDO_MAKE_DEPEND := GCC

# Enable Gliwa module by this variant
#MANDO_GLIWA_ENABLE := TRUE

# MPU Memory arrangement design
MANDO_MPU_MEMORY_ARG := TRUE

#################################################################
include $(MANDO_DIR)\mando_plugin_cfg.mak
include $(MANDO_DIR)\mando_common_cfg.mak
include $(MANDO_DIR)\mando_bsw_cfg.mak
include $(MANDO_DIR)\mando_asw_cfg.mak
include $(MANDO_DIR)\mando_tsl_cfg.mak
include $(MANDO_DIR)\mando_carpar_cfg.mak
include $(MANDO_DIR)\mando_opt_cfg.mak
-include $(WORKSPACE_BASE)\SourceCode\ASW\CAL\diag_cal.mak

#################################################################
include $(foreach PLUGIN,$(MANDO_BSW_MODULES),\
        $(MANDO_BSW_ROOT)\$(PLUGIN)\MAK\$(PLUGIN)$(RULES_FILE_SUFFIX))
include $(foreach PLUGIN,$(MANDO_BSW_MODULES),\
        $(MANDO_BSW_ROOT)\$(PLUGIN)\MAK\$(PLUGIN)$(DEFS_FILE_SUFFIX))

include $(foreach PLUGIN,$(MANDO_FAL_MODULES),\
        $(MANDO_FAL_ROOT)\$(PLUGIN)\MAK\$(PLUGIN)$(RULES_FILE_SUFFIX))
include $(foreach PLUGIN,$(MANDO_FAL_MODULES),\
        $(MANDO_FAL_ROOT)\$(PLUGIN)\MAK\$(PLUGIN)$(DEFS_FILE_SUFFIX))

include $(foreach PLUGIN,$(MANDO_TSL_MODULES),\
        $(MANDO_TSL_ROOT)\$(PLUGIN)\MAK\$(PLUGIN)$(RULES_FILE_SUFFIX))      
include $(foreach PLUGIN,$(MANDO_TSL_MODULES),\
        $(MANDO_TSL_ROOT)\$(PLUGIN)\MAK\$(PLUGIN)$(DEFS_FILE_SUFFIX))

ifeq ($(GEN_SINGLE_LIB_ENABLE), ENABLE)
LIBRARIES_TO_BUILD = MANDO_src
MANDO_src_FILES += $(foreach PLUGIN,$(MANDO_BSW_MODULES), $($(PLUGIN)_src_FILES))
MANDO_src_FILES += $(MCAL_src_FILES)
MANDO_src_FILES += $(SystemService_src_FILES)
ifeq ($(M_CAN_VER), CHERYLAN)
MANDO_src_FILES += $(CheryLAN_src_FILES)
endif
MANDO_src_FILES += $(foreach PLUGIN,$(MANDO_FAL_MODULES), $($(PLUGIN)_src_FILES))
endif

#################################################################
# DEFINE SYMBOLS
uc = $(subst a,A,$(subst b,B,$(subst c,C,$(subst d,D,$(subst e,E,$(subst f,F,$(subst g,G,$(subst h,H,$(subst i,I,$(subst j,J,$(subst k,K,$(subst l,L,$(subst m,M,$(subst n,N,$(subst o,O,$(subst p,O,$(subst q,Q,$(subst r,R,$(subst s,S,$(subst t,T,$(subst u,U,$(subst v,V,$(subst w,W,$(subst x,X,$(subst y,Y,$(subst z,Z,$1))))))))))))))))))))))))))
lc = $(subst A,a,$(subst B,b,$(subst C,c,$(subst D,d,$(subst E,e,$(subst F,f,$(subst G,g,$(subst H,h,$(subst I,i,$(subst J,j,$(subst K,k,$(subst L,l,$(subst M,m,$(subst N,n,$(subst O,o,$(subst P,p,$(subst Q,q,$(subst R,r,$(subst S,s,$(subst T,t,$(subst U,u,$(subst V,v,$(subst W,w,$(subst X,x,$(subst Y,y,$(subst Z,z,$1))))))))))))))))))))))))))

MANDO_BSW_MODULES_UPPER := $(call uc,$(MANDO_BSW_MODULES))
MANDO_FAL_MODULES_UPPER := $(call uc,$(MANDO_FAL_MODULES))
MANDO_TSL_MODULES_UPPER := $(call uc,$(MANDO_TSL_MODULES))
MANDO_PLUGIN_MODULES_UPPER := $(call uc,$(MANDO_PLUGIN_MODULES))

MANDO_MODULE_USED := $(MANDO_BSW_MODULES_UPPER) $(MANDO_FAL_MODULES_UPPER) $(MANDO_TSL_MODULES_UPPER) $(MANDO_PLUGIN_MODULES_UPPER)

CC_OPT += $(foreach MODULE, $(MANDO_MODULE_USED), \
    -D$(addsuffix _USED,$(addprefix MANDO_,$(MODULE))) \
)

ifeq ($(MANDO_PLATFORM),AUTOSAR)
CC_OPT += -DAUTOSAR_ENVIRONMENT
CPP_OPTS += -DAUTOSAR_ENVIRONMENT
CC_OPT += -DUSE_MCU_TRAP_HANDLER
CPP_OPTS += -DUSE_MCU_TRAP_HANDLER
ifeq ($(M_CAN_PROTOCOL_TYPE), PROTOCOL_TYPE_CANFD)
CC_OPT += -DAUTOSAR_ENVIRONMENT_AC_V201
CPP_OPTS += -DAUTOSAR_ENVIRONMENT_AC_V201
else
CC_OPT += -DAUTOSAR_ENVIRONMENT_V501
CPP_OPTS += -DAUTOSAR_ENVIRONMENT_V501
endif
MANDO_USE_TASKING_CINIT := TRUE
ifeq ($(MANDO_USE_CANNM), TRUE)
CC_OPT += -DMANDO_USE_CANNM
CPP_OPTS += -DMANDO_USE_CANNM
endif
endif

ifeq ($(MANDO_USE_TASKING_CINIT),TRUE)
CC_OPT += -DMANDO_USE_TASKING_CINIT
CPP_OPTS += -DMANDO_USE_TASKING_CINIT
LINK_OPT += -DMANDO_USE_TASKING_CINIT
endif

ifeq ($(MANDO_MPU_MEMORY_ARG),TRUE)
CC_OPT += -DMANDO_MPU_MEMORY_ARG
CPP_OPTS += -DMANDO_MPU_MEMORY_ARG
LINK_OPT += -DMANDO_MPU_MEMORY_ARG
endif
    
# Common linker options:
LINK_OPT += -DM_CAR_MAKER=$(M_CAR_MAKER)
LINK_OPT += -D$(M_CAR_MAKER)=$(M_CAR_MAKER)
LINK_OPT += -DM_CAR=$(M_CAR)
LINK_OPT += -D$(M_CAR)=$(M_CAR)